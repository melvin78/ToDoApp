@inject IDispatcher dispatcher
@using Fluxor
@using ToDoApp.Models
@using ToDoApp.State.ToDo
@inject IState<ToDoState> toDoState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<div class="p-2 md:w-1/3">
    <div class="flex rounded-lg h-full bg-gray-100 p-8 flex-col border-2 border-indigo-50 relative">

        @{
            if (IsDone)
            {
                <span class="bg-green-600 text-white px-3 py-1 tracking-widest text-xs absolute right-0 top-0 rounded-bl">DONE</span>
            }
        }
        <div class="flex items-center mb-3">
            <div class="w-8 h-8 mr-3 inline-flex items-center justify-center rounded-full text-white flex-shrink-0">
              
                @{
                    switch (Identifier)
                    {
                        case (int)ToDoIdentifier.MyDay:
                            <MyDayImage></MyDayImage>
                        break;
                            
                        case (int)ToDoIdentifier.Completed:
                            <PlannedImage></PlannedImage>
                        break;
                            
                        case (int)ToDoIdentifier.Important:
                            <ImportantImage></ImportantImage>
                        break;
                            
                    }
                }
               
            </div>
        </div>
        <div class="flex-grow">
            <p class="leading-relaxed text-base">@TaskName</p>
            <div class="flex justify-content-between">
                <svg @onclick="() => MarkAsImportant(Id)" fill="@(IsImportant ? "rgb(99 102 241)" : "none")" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-4 h-4 text-indigo-500 mt-3 hover:scale-110 hover:cursor-pointer" viewBox="0 0 22 22">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                </svg>
                <a class="mt-3 text-indigo-500 inline-flex items-center">
                    <span @onclick="() => RemoveToDo(Id)" class="w-4 h-4 mr-2 inline-flex items-center justify-center hover:cursor-pointer text-white rounded-full hover:scale-110 flex-shrink-0 ">
                        <svg width="36" height="43" viewBox="0 0 36 43" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M24.4379 8.33828V8.83828H24.9379H35.2918C35.4029 8.83828 35.5 8.93023 35.5 9.05226C35.5 9.17493 35.4023
 9.26694 35.2918 9.26694H33.8464H33.3464V9.76694V38.7119C33.3464 
40.8049 31.6602 42.5 29.5972 42.5H6.40356C4.34055 42.5 2.65435 40.8049 2.65435 38.7119V9.76694V9.26694H2.15435H0.708201C0.597706 9.26694 0.5 9.17493 0.5 9.05226C0.5 8.92958 0.597706 8.83757 0.708201 8.83757H11.0614H11.5614V8.33757V2.79444C11.5614 1.5254 12.584 0.5 13.8305 0.5H22.1688C23.4153 0.5 24.4379 1.5254 24.4379 2.79444V8.33828ZM23.5215 8.83757H24.0215V8.33757V2.79444C24.0215 1.77003 23.195 0.929379 22.1688 0.929379H13.8305C12.8043 0.929379 11.9778 1.77003 11.9778 2.79444V8.33757V8.83757H12.4778H23.5215ZM3.57004 9.26766H3.07004V9.76766V38.7126C3.07004 40.561 4.56012 42.0713 6.40285 42.0713H29.5964C31.4392 42.0713 32.9292 40.561 32.9292 38.7126V9.76766V9.26766H32.4292H3.57004ZM24.2871 32.9851V16.3285C24.2871 16.2058 24.3848 16.1138 24.4953 16.1138C24.6058 16.1138 24.7035 16.2058 24.7035 16.3285V32.9851C24.7035 33.1077 24.6058 33.1997 24.4953 33.1997C24.3844 33.1997 24.2871 33.1081 24.2871 32.9851ZM17.7914 32.9851V16.3285C17.7914 16.2058 17.8892 16.1138 17.9996 16.1138C18.1101 16.1138 18.2078 16.2058 18.2078 16.3285V32.9851C18.2078 33.1077 18.1101 33.1997 17.9996 33.1997C17.8888 33.1997 17.7914 33.1081 17.7914 32.9851ZM11.2958 32.9851V16.3285C11.2958 16.2058 11.3935 16.1138 11.504 16.1138C11.6145 16.1138 11.7122 16.2058 11.7122 16.3285V32.9851C11.7122 33.1077 11.6145 33.1997 11.504 33.1997C11.3932 33.1997 11.2958 33.1081 11.2958 32.9851Z" fill="black" stroke="#C01A24"/>
                        </svg>
                    </span>
                </a>
                <span @onclick="() => MarkAsComplete(Id)" class="@(Iscomplete ? "w-4 mt-3 h-4 ml-2 inline-flex items-center justify-center bg-green-700  hover:bg-green-600 text-white rounded-full flex-shrink-0 bg-green-700 hover:cursor-pointer" : "w-4 h-4 ml-2 mt-3 inline-flex items-center justify-center bg-gray-400 hover:bg-green-600 text-white rounded-full flex-shrink-0 hover:cursor-pointer")">
                    <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" class="w-3 h-3" viewBox="0 0 24 24">
                        <path d="M20 6L9 17l-5-5"></path>
                    </svg>
                </span>

            </div>

        </div>
    </div>
</div>

@code {

    [Parameter]
    public string TaskName { get; set; }

    [Parameter]
    public bool IsDone { get; set; }

    [Parameter]
    public Guid Id { get; set; }
    
    private bool Iscomplete = false;

    public bool IsImportant = false;


    [Parameter] 
    public int Identifier { get; set; }
    
    
    private void MarkAsComplete(Guid id)
    {
        Iscomplete = !Iscomplete;

        if (Iscomplete)
        {
            dispatcher.Dispatch(new MarkAsComplete(toDoState.Value.ToDoItem,id));
        }
        else
        {
            dispatcher.Dispatch(new UnMarkAsComplete(toDoState.Value.ToDoItem,id));

        }
    }


    private void RemoveToDo(Guid id)
    {
        if (id != Guid.Empty)
        {
            dispatcher.Dispatch(new RemoveToDoAction(toDoState.Value.ToDoItem, id));
        }
    }

    private void MarkAsImportant(Guid id)
    {
        IsImportant = !IsImportant;

        if (IsImportant)
        {
            dispatcher.Dispatch(new MarkAsImportantAction(toDoState.Value.ToDoItem, id));
        }

        else
        {
            dispatcher.Dispatch(new UnMarkAsImportant(toDoState.Value.ToDoItem, id));

        }
    }

}